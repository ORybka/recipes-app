{"version":3,"sources":["utils.js","index.js"],"names":["recipesData","allowedRecipes","getRecipe","recipeName","getRandomURL","window","dataStore","currentRecipe","randomRecipe","isDataLoading","error","recipeList","likedArr","likedRecipe","renderApp","document","getElementById","innerHTML","App","RecipeResults","content","renderRecipe","showLikedRecipesButton","RenderRandomBtn","RenderRandomRecipe","SearchByDish","GetRandomRecipe","url","response","fetch","ok","Error","statusText","results","json","meals","strMeal","e","strCategory","strInstructions","Object","keys","length","constructor","addLikeButton","performSearch","optionList","forEach","el","push","getCurrentRecipeData","recipeData","recipe","addLikedRecipe","includes","ShowLikedRecipes","showList","querySelector","map","style","display"],"mappings":"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","file":"recipes-app.71cc2313.js","sourceRoot":"..","sourcesContent":["export const recipesData = {};\nexport const allowedRecipes = [\n  'Pizza Express Margherita',\n  'Mediterranean Pasta Salad',\n  'Banana Pancakes',\n];\nexport function getRecipe(recipeName) {\n  return `https://www.themealdb.com/api/json/v1/1/search.php?s=${recipeName}`;\n}\nexport function getRandomURL() {\n  return 'https://www.themealdb.com/api/json/v1/1/random.php';\n}\n","import { allowedRecipes, getRecipe, getRandomURL } from './utils';\n\nwindow.dataStore = {\n  currentRecipe: '',\n  randomRecipe: {},\n  isDataLoading: false,\n  error: null,\n  recipeList: {},\n  likedArr: [],\n};\n\nlet likedRecipe = [];\nwindow.GetRandomRecipe = GetRandomRecipe;\nwindow.likedRecipe = likedRecipe;\nwindow.renderApp = renderApp;\nwindow.showList = showList;\nwindow.performSearch = performSearch;\nwindow.addLikedRecipe = addLikedRecipe;\n\nrenderApp();\n\nfunction renderApp() {\n  document.getElementById('app-root').innerHTML = `\n        ${App()}\n    `;\n}\n\nfunction RecipeResults() {\n  const { currentRecipe, isDataLoading, error } = window.dataStore;\n  let content = '';\n  if (currentRecipe === '') {\n    content = 'Please, choose the recipe from the list or try your luck and get random one :)';\n  } else {\n    if (isDataLoading) {\n      content = 'Loading ...';\n    }\n\n    if (error !== null) {\n      content = error;\n    }\n\n    // if (isCurrentRecipeDataLoaded()) {\n    content = `\n      ${renderRecipe()}\n      <br>\n      ${showLikedRecipesButton()}\n      `;\n    // }\n  }\n\n  return `<div>${content}</div>`;\n}\n\nfunction App() {\n  return `\n  <div>\n    ${RenderRandomBtn()}\n    <br>\n    ${RenderRandomRecipe()}\n    <br>\n    ${SearchByDish()}\n    <br>\n    ${RecipeResults()}\n  </div>\n  `;\n}\n\nfunction RenderRandomBtn() {\n  return `\n    <button id=\"random-recipe-btn\" onclick=\"window.GetRandomRecipe(); window.renderApp();\">Click to get a recipe</button>\n    <br>\n  `;\n}\n\nasync function GetRandomRecipe() {\n  const url = getRandomURL();\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n\n  try {\n    window.dataStore.isDataLoading = false;\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw Error(response.statusText);\n    } else {\n      const results = await response.json();\n      window.dataStore.randomRecipe = results.meals[0];\n      window.dataStore.recipeList[results.meals[0].strMeal] = results.meals;\n    }\n  } catch (e) {\n    window.dataStore.error = 'Some error ocurred...';\n  } finally {\n    renderApp();\n  }\n}\n\nfunction RenderRandomRecipe() {\n  const { randomRecipe } = window.dataStore;\n  let content = '';\n\n  const { strMeal, strCategory, strInstructions } = randomRecipe;\n  if (Object.keys(randomRecipe).length === 0 && randomRecipe.constructor === Object) {\n    content = '';\n  } else {\n    content += `<div>Your meal today is ${strMeal} from ${strCategory} category.</div><br>`;\n    content += `<div>Please, follow the instructions to cook ${strMeal}:</div><br>`;\n    content += `<div>${strInstructions}</div><br>`;\n    content += `${addLikeButton(strMeal)}`;\n  }\n\n  return `<div>${content}</div>`;\n}\n\n// function isCurrentRecipeDataLoaded() {\n//   return Boolean(getCurrentRecipeData());\n// }\n\nasync function performSearch(recipeName) {\n  const url = getRecipe(recipeName);\n  window.dataStore.currentRecipe = recipeName;\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n\n  try {\n    window.dataStore.isDataLoading = false;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw Error(response.statusText);\n    } else {\n      const results = await response.json();\n      window.dataStore.recipeList[recipeName] = results.meals;\n    }\n  } catch (e) {\n    window.dataStore.error = 'Some error ocurred...';\n  } finally {\n    renderApp();\n  }\n}\n\nfunction SearchByDish() {\n  const optionList = [];\n  allowedRecipes.forEach(el => optionList.push(`<option value=\"${el}\"></option>`));\n\n  return `\n    <input \n      type=\"search\" \n      id=\"search-recipe-input\" \n      list=\"recipe-list\" placeholder=\"Choose recipe\" \n      onchange=\"window.performSearch(this.value)\" \n      autocomplete=\"off\"\n    >\n    <datalist id=\"recipe-list\">\n    ${optionList}\n    </datalist>\n    <br><br>\n  `;\n}\n\nfunction getCurrentRecipeData() {\n  const { currentRecipe, recipeList } = window.dataStore;\n  return recipeList[currentRecipe];\n}\n\nfunction renderRecipe() {\n  const { currentRecipe } = window.dataStore;\n  const recipeData = getCurrentRecipeData();\n  let content = '';\n\n  if (recipeData) {\n    const { strInstructions } = recipeData[0];\n\n    content += `<div><h3>${currentRecipe}</h3></div>`;\n    content += `<div>${strInstructions}</div><br>`;\n    content += `${addLikeButton(currentRecipe)}`;\n  }\n  return content ? `<div>${content}</div>` : '';\n}\n\nfunction addLikeButton(recipe) {\n  const { currentRecipe, randomRecipe } = window.dataStore;\n  window.likedRecipe = recipe;\n\n  if (currentRecipe === recipe) {\n    return `\n    <button id=\"like-recipe-btn\" onclick=\"addLikedRecipe(likedRecipe); window.renderApp();\">Click to add this recipe<br>to your favorite</button>`;\n  } else if (randomRecipe.strMeal === recipe) {\n    return `\n    <button id=\"like-random-btn\" onclick=\"addLikedRecipe(likedRecipe); window.renderApp();\">Click to add this recipe<br>to your favorite</button>`;\n  }\n}\n\nfunction addLikedRecipe(recipe) {\n  const { likedArr } = window.dataStore;\n  if (!likedArr.includes(recipe)) {\n    likedArr.push(recipe);\n  }\n}\n\nfunction showLikedRecipesButton() {\n  let content = '';\n  content += `<button id=\"show-btn\" onclick=\"window.showList();\">Click to see your favorite recipes</button>`;\n  content += `<div>${ShowLikedRecipes()}</div>`;\n  return `<div>${content}</div>`;\n}\n\nfunction ShowLikedRecipes() {\n  let content = '';\n  window.dataStore.likedArr.forEach(el => (content += `<div>${el}</div>`));\n  return `\n    <div id=\"liked-title\" class=\"_hidden_7ad08\"><h3>List of your favorite recipes:</h3></div>\n    <div id=\"liked-list\" class=\"_hidden_7ad08\">${content}</div>`;\n}\n\nfunction showList() {\n  const elemArr = [document.querySelector('#liked-title'), document.querySelector('#liked-list')];\n  elemArr.map(el => {\n    el.style.display === 'block' ? (el.style.display = 'none') : (el.style.display = 'block');\n  });\n}\n"]}